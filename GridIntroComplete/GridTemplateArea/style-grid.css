@supports (grid-area: auto) {
@media screen and (min-width: 450px) { /* The following layout will only apply at screen sizes 450px and larger */

	.site {
		display: grid; /* Sets direct child tags to grid layout */
		grid-template-columns: 1fr 1fr; /* Sets two grid columns, each one fraction of the page */
		grid-template-rows: auto 1fr 3fr; /* Sets three rows (with a fourth row that can exist after the last grid line)*/
		grid-template-areas: /* We've created a layout with 2 columns and three rows above (with a fourth row after the grid line). */
			"title title"    /* Using grid template area, we can simply tell each row/column area what content should go where */
			"main masthead"  /* Notice that we've laid out two columns and four rows, each with its assigned content */
			"main sidebar"
			"footer footer";
			
	}

	.masthead {
		grid-area: masthead;
	}

	.page-title {
		grid-area: title;
	}

	.main-content {
		grid-area: main;
	}

	.sidebar {
		grid-area: sidebar;
	}

	.footer-content {
		grid-area: footer;
	}
}

/* When the above layout 'breaks' (i.e no longer looks good) due to window size, we can set a media query and 'fix' it */
@media screen and (min-width: 600px) { /* On screens larger that 600px, we can move from the two column layout to a three column layout. */ 
	.site {
		grid-template-columns: 1fr 1fr 2fr; /* We've set three columns, with the third column twice as wide as the other two columns */
		grid-template-areas: /* Using grid template area, we can tell each row/column area what content to display */
			"title title title" /* Now that we have three columns, we assign content for the three coulmns */
			"main .... footer" /* '....' means to leave this area blank.  You can use as many dots (without spaces) as you like. */
			"main masthead sidebar"
	}
}
}